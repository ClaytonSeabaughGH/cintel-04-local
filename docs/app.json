[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import ui, render, input\nfrom shinywidgets import render_plotly, render_widget\nimport palmerpenguins\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom shiny import reactive\nimport pandas as pd\n\n# Load data\npenguins_df = palmerpenguins.load_penguins()\n\n\n# -----------------------\n# Define User Interface\n# ------------------------\n\n# Add a sidebar\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\")\n    \n    # Drop-Down menu\n    ui.input_selectize(\n        id=\"selected_attribute\",\n        label=\"Selected Attribute\",\n        choices=[\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    \n\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 20)\n\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 20, 10)\n\n    # Checkbox group for filtering species\n    ui.input_checkbox_group(\n        \"selected_species_list\",\n        \"Filter by Species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        inline=False,\n    )\n    # Checkbox group for filtering the dataset by penguin island\n    ui.input_checkbox_group(\n        \"selected_island_list\",\n        \"Filter by Island:\",\n        [\"Biscoe\", \"Dream\", \"Torgersen\"],\n        selected=[\"Biscoe\", \"Dream\", \"Torgersen\"],\n        inline=False,\n    )\n    # Add numeric range filter for Body Mass\n    ui.input_slider(\"body_mass_range\", \"Filter by Body Mass\", 1000, 6000, [2000, 5000])\n\n   \n    ui.hr()\n    ui.a(\n        \"GitHub\",\n        href=\"https://github.com/ClaytonSeabaughGH/cintel-02-data\",\n        target=\"_blank\",\n    )\n    \n\n\n# ----------------------------------------\n# Create Main layout for displaying plots\n# ----------------------------------------\n\nui.page_opts(title=\"Clayton's Penguin Data\", fillable=True)\n\n#-------------------------------\n# Create Data gird and table\n#-------------------------------\nwith ui.layout_columns():\n    # Create Data Table\n    with ui.card():\n        \"Penguins Data Table\"\n\n        @render.data_frame\n        def penguinstable_df():\n            return render.DataTable(penguins_df, filters=False, selection_mode=\"row\")\n\n    # Create Data Grid\n    with ui.card():\n        \"Penguins Data Grid\"\n\n        @render.data_frame\n        def penguinsgrid_df():\n            return render.DataGrid(penguins_df, filters=False, selection_mode=\"row\")\n        \n#-----------------------------\n# Create Plots\n#----------------------------\n\n# Create interactive plotly plot\nwith ui.layout_columns(col_widths=6):\n    with ui.card(full_screen=True):\n    # Add a title with dynamic information\n        @render_widget\n        def plotly_plot():\n            filtered_df = filtered_data()\n            selected_attribute = input.selected_attribute()\n            bin_count = input.plotly_bin_count()\n            species_filter = ', '.join(input.selected_species_list())\n            fig = px.histogram(\n                filtered_df,\n                x=selected_attribute,\n                nbins=bin_count,\n                title=f\"Plotly Histogram: {selected_attribute} (Species: {species_filter})\",\n                color=\"species\",\n    )\n            fig.update_traces(marker_line_color=\"black\", marker_line_width=2)\n            fig.update_layout(width=800)\n            return fig\n\n# Create interactive seaborn plot\n    with ui.card(full_screen=True):\n        \n        @render.plot(alt=\"Seaborn Histogram\")\n        def seaborn_plot():\n            selected_attribute = input.selected_attribute()\n            filtered_df = filtered_data()\n            ax = sns.histplot(\n                data=filtered_df,\n                x=selected_attribute,\n                bins=input.seaborn_bin_count(),\n                hue=\"species\",\n                multiple=\"stack\",\n            )\n            ax.set_title(\"Seaborn Histogram\")\n            ax.set_xlabel(selected_attribute)\n            ax.set_ylabel(\"Count\")\n            return ax\n\n# Create plotly scatter plot\n    with ui.card():\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_widget\n        def plotly_scatterplot():\n            filtered_df = filtered_data()\n            fig = px.scatter(\n                filtered_df,\n                x=\"body_mass_g\",\n                y=\"flipper_length_mm\",\n                color=\"species\",\n                title=\"Penguins Scatterplot: Body Mass vs. Flipper Length\",\n                labels={\n                \"body_mass_g\": \"Body Mass (g)\",\n                \"flipper_length_mm\": \"Flipper Length (mm)\",\n            },\n        )\n            return fig\n\n# Create a violin plot showing distribution of mass\n    with ui.card():\n        ui.card_header(\"Plotly Violinplot: Species\")\n\n        @render_plotly\n        def line_plot():\n            filtered_df = filtered_data()\n            selected_attribute = input.selected_attribute()\n            fig = px.violin(\n                filtered_df,\n                y=selected_attribute,\n                x=\"species\",\n                box=True,\n                points=\"all\",\n                title=\"Attribute Distribution by Species\",\n                color=\"species\",\n        )\n            return fig\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Define a reactive calculation for data filtering\n\n@reactive.calc\ndef filtered_data() -> pd.DataFrame:\n    # Apply species filter\n    filtered_df = penguins_df[\n        penguins_df[\"species\"].isin(input.selected_species_list())\n    ]\n    \n    # Apply island filter\n    filtered_df = filtered_df[filtered_df[\"island\"].isin(input.selected_island_list())]\n    \n    # Add filter for body mass\n    mass_min, mass_max = input.body_mass_range()\n    filtered_df = filtered_df[(filtered_df['body_mass_g'] >= mass_min) & (filtered_df['body_mass_g'] <= mass_max)]\n\n    # Check if the DataFrame is empty after applying all filters\n    if filtered_df.empty:\n        return pd.DataFrame()  # Return an empty DataFrame if no data matches the filters\n\n    return filtered_df\n", "type": "text"}]